//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Core.Factories;
using Core.Meta.Components;

public partial class MetaContext {

    public MetaEntity enemyFactoryEntity { get { return GetGroup(MetaMatcher.EnemyFactory).GetSingleEntity(); } }
    public EnemyFactoryComponent enemyFactory { get { return enemyFactoryEntity.enemyFactory; } }
    public bool hasEnemyFactory { get { return enemyFactoryEntity != null; } }

    public MetaEntity SetEnemyFactory(IEnemyFactory newValue) {
        if (hasEnemyFactory) {
            throw new Entitas.EntitasException("Could not set EnemyFactory!\n" + this + " already has an entity with Services.Components.EnemyFactoryComponent!",
                "You should check if the context already has a enemyFactoryEntity before setting it or use context.ReplaceEnemyFactory().");
        }
        var entity = CreateEntity();
        entity.AddEnemyFactory(newValue);
        return entity;
    }

    public void ReplaceEnemyFactory(IEnemyFactory newValue) {
        var entity = enemyFactoryEntity;
        if (entity == null) {
            entity = SetEnemyFactory(newValue);
        } else {
            entity.ReplaceEnemyFactory(newValue);
        }
    }

    public void RemoveEnemyFactory() {
        enemyFactoryEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class MetaEntity {

    public EnemyFactoryComponent enemyFactory { get { return (EnemyFactoryComponent)GetComponent(MetaComponentsLookup.EnemyFactory); } }
    public bool hasEnemyFactory { get { return HasComponent(MetaComponentsLookup.EnemyFactory); } }

    public void AddEnemyFactory(IEnemyFactory newValue) {
        var index = MetaComponentsLookup.EnemyFactory;
        var component = (EnemyFactoryComponent)CreateComponent(index, typeof(EnemyFactoryComponent));
        component.Value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceEnemyFactory(IEnemyFactory newValue) {
        var index = MetaComponentsLookup.EnemyFactory;
        var component = (EnemyFactoryComponent)CreateComponent(index, typeof(EnemyFactoryComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveEnemyFactory() {
        RemoveComponent(MetaComponentsLookup.EnemyFactory);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class MetaMatcher {

    static Entitas.IMatcher<MetaEntity> _matcherEnemyFactory;

    public static Entitas.IMatcher<MetaEntity> EnemyFactory {
        get {
            if (_matcherEnemyFactory == null) {
                var matcher = (Entitas.Matcher<MetaEntity>)Entitas.Matcher<MetaEntity>.AllOf(MetaComponentsLookup.EnemyFactory);
                matcher.componentNames = MetaComponentsLookup.componentNames;
                _matcherEnemyFactory = matcher;
            }

            return _matcherEnemyFactory;
        }
    }
}
