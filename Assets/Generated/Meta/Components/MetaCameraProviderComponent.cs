//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Core.Meta.Components;
using Infrastructure.Services;

public partial class MetaContext {

    public MetaEntity cameraProviderEntity { get { return GetGroup(MetaMatcher.CameraProvider).GetSingleEntity(); } }
    public CameraProviderComponent cameraProvider { get { return cameraProviderEntity.cameraProvider; } }
    public bool hasCameraProvider { get { return cameraProviderEntity != null; } }

    public MetaEntity SetCameraProvider(ICameraProvider newValue) {
        if (hasCameraProvider) {
            throw new Entitas.EntitasException("Could not set CameraProvider!\n" + this + " already has an entity with Services.Components.CameraProviderComponent!",
                "You should check if the context already has a cameraProviderEntity before setting it or use context.ReplaceCameraProvider().");
        }
        var entity = CreateEntity();
        entity.AddCameraProvider(newValue);
        return entity;
    }

    public void ReplaceCameraProvider(ICameraProvider newValue) {
        var entity = cameraProviderEntity;
        if (entity == null) {
            entity = SetCameraProvider(newValue);
        } else {
            entity.ReplaceCameraProvider(newValue);
        }
    }

    public void RemoveCameraProvider() {
        cameraProviderEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class MetaEntity {

    public CameraProviderComponent cameraProvider { get { return (CameraProviderComponent)GetComponent(MetaComponentsLookup.CameraProvider); } }
    public bool hasCameraProvider { get { return HasComponent(MetaComponentsLookup.CameraProvider); } }

    public void AddCameraProvider(ICameraProvider newValue) {
        var index = MetaComponentsLookup.CameraProvider;
        var component = (CameraProviderComponent)CreateComponent(index, typeof(CameraProviderComponent));
        component.Value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceCameraProvider(ICameraProvider newValue) {
        var index = MetaComponentsLookup.CameraProvider;
        var component = (CameraProviderComponent)CreateComponent(index, typeof(CameraProviderComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveCameraProvider() {
        RemoveComponent(MetaComponentsLookup.CameraProvider);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class MetaMatcher {

    static Entitas.IMatcher<MetaEntity> _matcherCameraProvider;

    public static Entitas.IMatcher<MetaEntity> CameraProvider {
        get {
            if (_matcherCameraProvider == null) {
                var matcher = (Entitas.Matcher<MetaEntity>)Entitas.Matcher<MetaEntity>.AllOf(MetaComponentsLookup.CameraProvider);
                matcher.componentNames = MetaComponentsLookup.componentNames;
                _matcherCameraProvider = matcher;
            }

            return _matcherCameraProvider;
        }
    }
}
