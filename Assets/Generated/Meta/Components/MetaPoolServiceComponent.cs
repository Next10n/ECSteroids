//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class MetaContext {

    public MetaEntity poolServiceEntity { get { return GetGroup(MetaMatcher.PoolService).GetSingleEntity(); } }
    public Core.Meta.Components.PoolServiceComponent poolService { get { return poolServiceEntity.poolService; } }
    public bool hasPoolService { get { return poolServiceEntity != null; } }

    public MetaEntity SetPoolService(Infrastructure.Services.Pool.IPoolService newValue) {
        if (hasPoolService) {
            throw new Entitas.EntitasException("Could not set PoolService!\n" + this + " already has an entity with Core.Meta.Components.PoolServiceComponent!",
                "You should check if the context already has a poolServiceEntity before setting it or use context.ReplacePoolService().");
        }
        var entity = CreateEntity();
        entity.AddPoolService(newValue);
        return entity;
    }

    public void ReplacePoolService(Infrastructure.Services.Pool.IPoolService newValue) {
        var entity = poolServiceEntity;
        if (entity == null) {
            entity = SetPoolService(newValue);
        } else {
            entity.ReplacePoolService(newValue);
        }
    }

    public void RemovePoolService() {
        poolServiceEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class MetaEntity {

    public Core.Meta.Components.PoolServiceComponent poolService { get { return (Core.Meta.Components.PoolServiceComponent)GetComponent(MetaComponentsLookup.PoolService); } }
    public bool hasPoolService { get { return HasComponent(MetaComponentsLookup.PoolService); } }

    public void AddPoolService(Infrastructure.Services.Pool.IPoolService newValue) {
        var index = MetaComponentsLookup.PoolService;
        var component = (Core.Meta.Components.PoolServiceComponent)CreateComponent(index, typeof(Core.Meta.Components.PoolServiceComponent));
        component.Value = newValue;
        AddComponent(index, component);
    }

    public void ReplacePoolService(Infrastructure.Services.Pool.IPoolService newValue) {
        var index = MetaComponentsLookup.PoolService;
        var component = (Core.Meta.Components.PoolServiceComponent)CreateComponent(index, typeof(Core.Meta.Components.PoolServiceComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemovePoolService() {
        RemoveComponent(MetaComponentsLookup.PoolService);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class MetaMatcher {

    static Entitas.IMatcher<MetaEntity> _matcherPoolService;

    public static Entitas.IMatcher<MetaEntity> PoolService {
        get {
            if (_matcherPoolService == null) {
                var matcher = (Entitas.Matcher<MetaEntity>)Entitas.Matcher<MetaEntity>.AllOf(MetaComponentsLookup.PoolService);
                matcher.componentNames = MetaComponentsLookup.componentNames;
                _matcherPoolService = matcher;
            }

            return _matcherPoolService;
        }
    }
}
